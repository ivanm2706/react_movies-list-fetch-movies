{"version":3,"sources":["api.ts","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["API_URL","MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","error","preview","isLoading","onFindMovie","addMovie","useState","valueInput","setValueInput","htmlFor","type","id","placeholder","value","onChange","e","currentTarget","setIsErrorMessage","classNames","disabled","onClick","preventDefault","setIsPreview","App","setMovies","previewMovie","setPreviewMovie","setIsLoading","query","fetch","then","res","json","catch","Response","Error","Title","Plot","Poster","imdbID","finally","findIndex","state","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8cc8cae1.chunk.js","sourcesContent":["import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_KEY = '953f87d7';\n\nconst API_URL = `https://www.omdbapi.com/?apikey=${API_KEY}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie | null,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie?.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie?.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie?.description}\n        <br />\n        <a href={movie?.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { FC, useState } from 'react';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype Props = {\n  error: {\n    error: boolean,\n    setIsErrorMessage: React.Dispatch<React.SetStateAction<boolean>>,\n  },\n  preview: {\n    preview: boolean,\n    setIsPreview: React.Dispatch<React.SetStateAction<boolean>>,\n  },\n  movie: Movie | null,\n  isLoading: boolean,\n  onFindMovie: (value: string) => void,\n  addMovie: () => void,\n};\n\nexport const FindMovie: FC<Props> = ({\n  error,\n  preview,\n  movie,\n  isLoading,\n  onFindMovie,\n  addMovie,\n}) => {\n  const [valueInput, setValueInput] = useState<string>('');\n\n  const hendlerInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValueInput(e.currentTarget.value);\n    error.setIsErrorMessage(false);\n  };\n\n  const hendlerFindMovie = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    e.preventDefault();\n    onFindMovie(valueInput);\n  };\n\n  const addMovieToList = () => {\n    setValueInput('');\n    addMovie();\n    preview.setIsPreview(false);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={valueInput}\n              onChange={hendlerInput}\n            />\n          </div>\n\n          {error.error && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"errorMessage\"\n            >\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={valueInput === ''}\n              onClick={hendlerFindMovie}\n            >\n              {!movie ? 'Find a movie' : 'Search again'}\n            </button>\n          </div>\n\n          {preview.preview && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovieToList}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n\n        </div>\n      </form>\n\n      {preview.preview && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie || null} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { getMovie } from './api';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [error, setIsErrorMessage] = useState<boolean>(false);\n  const [preview, setIsPreview] = useState<boolean>(false);\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [previewMovie, setPreviewMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const findMoviePreview = (value: string) => {\n    setIsLoading(true);\n    getMovie(value)\n      .then((movie) => {\n        if ('Error' in movie) {\n          throw new Error(movie.Error);\n        }\n\n        setPreviewMovie({\n          title: movie.Title,\n          description: movie.Plot,\n          imgUrl: movie.Poster === 'N/A'\n            ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n            : movie.Poster,\n          imdbUrl: `https://www.imdb.com/title/${movie.imdbID}`,\n          imdbId: movie.imdbID,\n        });\n        setIsPreview(true);\n      })\n      .catch(() => {\n        setIsPreview(false);\n        setIsErrorMessage(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const addMovieToList = () => {\n    if (\n      previewMovie\n      && movies.findIndex(({ imdbId }) => imdbId === previewMovie.imdbId) < 0\n    ) {\n      setMovies(state => [...state, previewMovie]);\n    }\n\n    setPreviewMovie(null);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movie={previewMovie}\n          isLoading={isLoading}\n          onFindMovie={findMoviePreview}\n          addMovie={addMovieToList}\n          error={{ error, setIsErrorMessage }}\n          preview={{ preview, setIsPreview }}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}